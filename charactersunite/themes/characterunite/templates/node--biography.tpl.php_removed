<?php

/**
 * @file
 * Characterunite's theme implementation to display a node.
 *
 * Available variables:
 * - $title: the (sanitized) title of the node.
 * - $content: An array of node items. Use render($content) to print them all,
 *   or print a subset such as render($content['field_example']). Use
 *   hide($content['field_example']) to temporarily suppress the printing of a
 *   given element.
 * - $user_picture: The node author's picture from user-picture.tpl.php.
 * - $date: Formatted creation date. Preprocess functions can reformat it by
 *   calling format_date() with the desired parameters on the $created variable.
 * - $name: Themed username of node author output from theme_username().
 * - $node_url: Direct URL of the current node.
 * - $display_submitted: Whether submission information should be displayed.
 * - $submitted: Submission information created from $name and $date during
 *   template_preprocess_node().
 * - $classes: String of classes that can be used to style contextually through
 *   CSS. It can be manipulated through the variable $classes_array from
 *   preprocess functions. The default values can be one or more of the
 *   following:
 *   - node: The current template type; for example, "theming hook".
 *   - node-[type]: The current node type. For example, if the node is a
 *   "Blog entry" it would result in "node-blog". Note that the machine
 *   name will often be in a short form of the human readable label.
 *   - node-teaser: Nodes in teaser form.
 *   - node-preview: Nodes in preview mode.
 *   The following are controlled through the node publishing options.
 *   - node-promoted: Nodes promoted to the front page.
 *   - node-sticky: Nodes ordered above other non-sticky nodes in teaser
 *   listings.
 *   - node-unpublished: Unpublished nodes visible only to administrators.
 * - $title_prefix (array): An array containing additional output populated by
 *   modules, intended to be displayed in front of the main title tag that
 *   appears in the template.
 * - $title_suffix (array): An array containing additional output populated by
 *   modules, intended to be displayed after the main title tag that appears in
 *   the template.
 *
 * Other variables:
 * - $node: Full node object. Contains data that may not be safe.
 * - $type: Node type; for example, story, page, blog, etc.
 * - $comment_count: Number of comments attached to the node.
 * - $uid: User ID of the node author.
 * - $created: Time the node was published formatted in Unix timestamp.
 * - $classes_array: Array of html class attribute values. It is flattened
 *   into a string within the variable $classes.
 * - $zebra: Outputs either "even" or "odd". Useful for zebra striping in
 *   teaser listings.
 * - $id: Position of the node. Increments each time it's output.
 *
 * Node status variables:
 * - $view_mode: View mode; for example, "full", "teaser".
 * - $teaser: Flag for the teaser state (shortcut for $view_mode == 'teaser').
 * - $page: Flag for the full page state.
 * - $promote: Flag for front page promotion state.
 * - $sticky: Flags for sticky post setting.
 * - $status: Flag for published status.
 * - $comment: State of comment settings for the node.
 * - $readmore: Flags true if the teaser content of the node cannot hold the
 *   main body content.
 * - $is_front: Flags true when presented in the front page.
 * - $logged_in: Flags true when the current user is a logged-in member.
 * - $is_admin: Flags true when the current user is an administrator.
 *
 * Field variables: for each field instance attached to the node a corresponding
 * variable is defined; for example, $node->body becomes $body. When needing to
 * access a field's raw values, developers/themers are strongly encouraged to
 * use these variables. Otherwise they will have to explicitly specify the
 * desired field language; for example, $node->body['en'], thus overriding any
 * language negotiation rule that was previously applied.
 *
 * @see template_preprocess()
 * @see template_preprocess_node()
 * @see template_process()
 */

?>

<?php

/**

$query = new EntityFieldQuery();
$query->entityCondition('entity_type', 'node');
$query->entityCondition('bundle', array('biography'));
$query->propertyCondition('status', 1);
$query->propertyCondition('title', 'Jasmine Babers', '=');
$homepage = $query->execute();
$field = 'field_biography_nam';
if (!empty($homepage['node'])) {
echo '<br/>Not empty->';
print_r($homepage);
    $nid = reset(array_keys($homepage['node']));
    $node_obj = node_load($nid);
    $field_data = field_get_items('node', $node_obj, $field);print_r($field_data);
    if (is_array($field_data)) {
      $field_data = reset($field_data); print_r($field_data);
      echo "=-=-=-". check_plain($field_data['value']);
    } else {
    echo 'fff';
    }
}
if (empty($homepage['node'])) {
echo '<br/>Empty->';
print_r($homepage);
}

exit;
**/
$biography_name = characterunite_reset(field_get_items('node', $node, 'field_biography_name'));
$field_biography_name = (isset($biography_name['value'])?$biography_name['value']:'');

$description_more_link = characterunite_reset(field_get_items('node', $node, 'field_description_more_link'));
$field_description_more_link = (isset($description_more_link['value'])?$description_more_link['value']:'');

$biography_description = characterunite_reset(field_get_items('node', $node, 'field_biography_description'));
$field_biography_description = (isset($biography_description['value'])?$biography_description['value']:'');

$biography_image = characterunite_reset(field_get_items('node', $node, 'field_biography_image'));
$field_biography_image = (isset($biography_image['uri'])?$biography_image['uri']:'');

$biography_links_title = characterunite_reset(field_get_items('node', $node, 'field_biography_links_title'));
$field_biography_links_title = (isset($biography_links_title['value'])?$biography_links_title['value']:'');

$biography_links = field_get_items('node', $node, 'field_biography_links');

?>
  <!-- initiativesHeader end -->
  <div class="showcaseMain layoutEven-bio">
    <div id="colMain">
      <div class="mod-article">
        <h1><?php echo $field_biography_name; ?></h1>  
        <?php 
          if ( !empty($field_description_more_link) && $field_description_more_link != 0 ) {
            echo '<span class="leftpane_desc" style="height:300px">'.$field_biography_description.'</span><a class="leftpane_desc_more amore" href="javascript:;" onclick="LeftDesc(\'leftpane_desc\', \'less\', 300, \'\');">More</a><a class="leftpane_desc_less amore" href="javascript:;" onclick="LeftDesc(\'leftpane_desc\', \'more\', 300, \'\');">Less</a>';
          }
          else {
            echo $field_biography_description;
          }
        ?>
        <?php if ($region['spread_the_word']): ?>
          <aside class="share">
          <?php print render($region['spread_the_word']); ?>
          </aside>
        <?php endif; ?>
      </div>
    </div>
    <!-- initiativesLeft end -->
    <div id="colSide">
      <?php if (!empty($field_biography_image)) { ?>
      <img alt="<?php echo $node->title; ?>" src="<?php echo file_create_url($field_biography_image); ?>" />
      <?php } ?>
      <div class="link-mod">
        <div class="relatedVideosHeader">
          <h1>
            <?php
              if ( !empty($field_biography_links_title) ) {
                echo $field_biography_links_title;
              }
            ?>
          </h1>
        </div>
        <?php
        if ( !empty($biography_links) ) {
        ?>
        <ul>
          <?php 
            $field_biography_links_count = count($biography_links);
            for ($a=0;$a<$field_biography_links_count;$a++) {
              echo '<li>'.l($biography_links[$a]['title'], $biography_links[$a]['url'], array('attributes' => array('target' => $biography_links[$a]['attributes']['target']))).'</li>';
            }
          ?>
        </ul>
        <?php } ?>
      </div>
    </div>
    <!-- initiativesRight end -->
  </div>
  <!-- showcaseMain end -->